var e_mail;
var phone;
var completed_steps=0;

// Крок 1. Ініціалізація криптографічних бібліотек з використанням Java-модулю.
// Ця функція викликається через кнопку і є першою у послідовності функцій
function regFormStep01_euSignInit() {
	try {
		var euisinit = euSign.IsInitialized();
		if (euisinit == true) {euSign.Finalize(); }
		euSign.SetCharset("UTF-16LE");
		euSign.SetUIMode(false);
		euSign.Initialize();
		euSign.width = "1px";
		euSign.SetUIMode(false);
		euisinit = euSign.IsInitialized();
	} catch(e) {
		if (confirm("Помилка при запуску Java-аплету. Можливо, Вам необхідно дозволити браузеру запуск Java. Чи бажаєти перейти на сторінку перевірки інсталяції Java?")) {
			window.location="http://www.java.com/ru/download/testjava.jsp";
		}
		return;
	}

	if (euisinit == true)
	{
// Перевірка початкових налаштувань криптографічних бібліотек у реєстрі
// Перевіряється наявність розділу реєстру HKCU\Software\Institute of Informational Techologies\Certificate Authority-1.3
// Також перевіряється відповідний розділ у HKLM
// Примітка. Для 64-бітних ОС, у яких встановлене ПЗ ІІТ Користувач 1.3, існує інша гілка реєстру, яка впливає на результат
//  	функції перевірки необхідності налаштувань (SOFTWARE\Wow6432Node\Institute of Informational Techologies\Certificate Authority-1.3)
		try {
			var r2_01 = euSign.DoesNeedSetSettings();
			
			var euMode = euSign.CreateModeSettings();			
			euMode.SetOfflineMode(false);
			euSign.SetModeSettings(euMode);
			
//				r2_01 = true;
		} catch(e) {
			showException(e);
			alert("Крок 1. ПОМИЛКА. Не виконано команду euSign.DoesNeedSetSettings(). "+euSign.GetLastError());
			return; }
			
// Якщо в реєстрі немає необхідного розділу, то встановлюються параметри за замовчуванням
		if (r2_01 == true) {
//	Встановлення параметрів файлового сховища за замовчуванням
			regFormUtils_DefaultFileSettings();

//	Встановлення(перезапис) параметрів сервера OCSP. У даному випадку використовуватиметься сервер OCSP Центрального засвідчувального органу
			var OCSPSettings = euSign.CreateOCSPSettings();
			OCSPSettings.SetUseOCSP(true);
			OCSPSettings.SetBeforeStore(false);
			OCSPSettings.SetAddress("czo.gov.ua/services/ocsp");
			OCSPSettings.SetPort("80");
			euSign.SetOCSPSettings(OCSPSettings);

//	Створити порожній параметр
			var LDAPSettings = euSign.CreateLDAPSettings();
			euSign.SetLDAPSettings(LDAPSettings);

//	Створити порожній параметр налаштувань сервера міток часу. Цей параметр повинен бути визначений у наступних кроках налаштування
			var TSPSettings = euSign.CreateTSPSettings();
			euSign.SetTSPSettings(TSPSettings);
		
//	Створити порожній параметр. Цей параметр може бути визначений у наступних кроках налаштування
			var CMPSettings = euSign.CreateCMPSettings();
			euSign.SetCMPSettings(CMPSettings);
		}
		
//	Спроба зчитування збережених параметрів проксі-сервера
		var ProxySettings;
		try {
			ProxySettings = euSign.CreateProxySettings();
			ProxySettings = euSign.GetProxySettings();
			document.getElementById('ProxyUse').checked = ProxySettings.GetUseProxy();
			Use_Proxy_Check();
			if (ProxySettings.GetUseProxy()==true) {
				document.getElementById('ProxyName').value = ProxySettings.GetAddress();
				document.getElementById('ProxyPort').value = ProxySettings.GetPort();
				document.getElementById('ProxyAnonymous').checked = !ProxySettings.GetAnonymous();
				Use_Proxypas_Check();
//				if (!ProxySettings.GetAnonymous()) {
				if (document.getElementById('ProxyAnonymous').checked){
					document.getElementById('ProxyUser').value = ProxySettings.GetUser();
					document.getElementById('ProxyPass').value = ProxySettings.GetPassword();
				}
			}
//Цей параметр не функціонує належним чином, тому відключений (todo: перевірити вплив на функціонування)
//					document.getElementById('ProxySavePass').checked = ProxySettings.GetSavePassword();
	
		} catch(e) { // Помилка при зчитуванні параметрів проксі-сервера. Зберігаємо пусті параметри
			try {
				ProxySettings = euSign.CreateProxySettings();
				euSign.SetProxySettings(ProxySettings);
			} catch(e) {
				showException(e); alert("Помилка при встановленні початкових параметрів. Перевірте, чи запущений програмний модуль Java. "+euSign.GetLastError()); return;
			}
		}

//	Спроба зчитування збережених параметрів файлового сховища
		try {
			var settings = euSign.CreateFileStoreSettings();
			settings = euSign.GetFileStoreSettings();
			document.getElementById('OwnCertPath').value = settings.GetPath();
//	Додати перевірку на можливість запису нових файлів, якщо немає сертифікатів користувачів
		} catch(e) {
			try {
				regFormUtils_DefaultFileSettings();
				var settings1 = euSign.CreateFileStoreSettings();
				settings1 = euSign.GetFileStoreSettings();
				document.getElementById('OwnCertPath').value = settings1.GetPath();
			} catch(e) {showException(e); alert("Помилка створення параметрів файлового сховища. Оберіть іншу директорію для збереження сертифікатів. "+euSign.GetLastError()); euSign.Finalize(); return;}
		}
		
	}	else alert("Помилка запуску. Спробуйте у іншому браузері");
	
	if (completed_steps < 1)
		completed_steps=1;

//	showStep(completed_steps+1);
}


function regFormUtils_DefaultFileSettings() {
//	Todo: Необязательно иметь права на запись в каталог сертификатов, если там есть хотябы один валидный сертификат пользователя
			try {
				var settings = euSign.CreateFileStoreSettings();
//	Каталог, в якому розміщуються сертифікати та списки відкликаних сертифікатів
				settings.SetPath("C:\\CertificatesJava");
//				console.log("Каталог з сертифікатами: " + settings.GetPath());
//	Функція Java-аплету з створення директорії
				euSign.CreateFolder(settings.GetPath());
//	Признак необхідності використання списку відкликаних сертифікатів (СВС) при визначенні статусу сертифіката
				settings.SetCheckCRLs(true);
//	Встановити необхідність автоматично перечитувати файлове сховище сертифікатів, у якому також зберігатимуться списки відкликаних сертифікатів					
				settings.SetAutoRefresh(true);
//	Признак необхідності використання СВС тільки власного ЦСК користувача
				settings.SetOwnCRLsOnly(false);
//	Признак необхідності перевірки наявності двох діючих СВС – повного та часткового
				settings.SetFullAndDeltaCRLs(true);

				settings.SetAutoDownloadCRLs(false);
				settings.SetSaveLoadedCerts(true);
//	Час зберігання стану перевіреного сертифіката (у секундах) 
				settings.SetExpireTime(3600);				
//	Застосувати встановлені параметри та записати їх до реєстру
				euSign.SetFileStoreSettings(settings);
				var r3_02 = [1,2];
				r3_02[0] = 48; r3_02[1] = 49;
				try {
//	Перевірка можливості запису файлів до файлового шляху за замовчуванням
					euSign.WriteFile(settings.GetPath() + "\\delete.me", r3_02);
				} catch(e) {
//	Заборонено запис до Файлового шляху за замовчуванням, спробувати директорію з тимчасовими файлами бібліотеки
					try {
						settings.SetPath(euSign.GetInstallPath()+"\\" + "Certificates and CRLs");
						euSign.WriteFile(settings.GetPath() + "\\delete.me", r3_02);
						alert("Поточний шлях до сховища сертифікатів: " + settings.GetPath());
						document.getElementById('OwnCertPath').value = settings.GetPath();
					} catch (e) {
						showException(e);
						alert("Неможливо здійснити запис до тимчасової директорії. Перевірте налаштування файлової безпеки комп'ютера або спробуйте на іншому. "+euSign.GetLastError());
						euSign.Finalize();
						return;
					}
				}
			} catch(e) {showException(e); alert("Помилка створення параметрів файлового сховища. Оберіть іншу директорію для збереження сертифікатів. "+euSign.GetLastError()); euSign.Finalize(); return;}
}


// Крок 2. Перевірка початкових налаштувань криптографічних бібліотек у реєстрі
// Перевіряється наявність розділу реєстру HKCU\Software\Institute of Informational Techologies\Certificate Authority-1.3
// Також перевіряється відповідний розділ у HKLM
// Примітка. Для 64-бітних ОС, у яких встановлене ПЗ ІІТ Користувач 1.3, існує інша гілка реєстру, яка впливає на результат
//  	функції перевірки необхідності налаштувань (SOFTWARE\Wow6432Node\Institute of Informational Techologies\Certificate Authority-1.3)
function regFormStep02_Settings() {
// Налаштування проксі-сервера, якщо користувач вказав його наявність
	try {
		var ProxySettings = euSign.CreateProxySettings();
		ProxySettings = euSign.GetProxySettings();
		
		
		var bProxyUse = document.getElementById('ProxyUse').checked;
		ProxySettings.SetUseProxy(bProxyUse);
		if (bProxyUse) {
			ProxySettings.SetAddress(document.getElementById('ProxyName').value);
			ProxySettings.SetPort(document.getElementById('ProxyPort').value);
			ProxySettings.SetAnonymous(!document.getElementById('ProxyAnonymous').checked);
			if (ProxySettings.GetAnonymous() == false) {
				ProxySettings.SetUser(document.getElementById('ProxyUser').value);
				ProxySettings.SetPassword(document.getElementById('ProxyPass').value);
//Цей параметр не функціонує належним чином, тому відключений
//					document.getElementById('ProxySavePass').checked = ProxySettings.GetSavePassword();			
			}
		} else {
			ProxySettings.SetAnonymous(true);
			ProxySettings.SetUser("");
			ProxySettings.SetPassword("");
		}
		euSign.SetProxySettings(ProxySettings);
	} catch(e) {
		ProxySettings = euSign.CreateProxySettings();
		euSign.SetProxySettings(ProxySettings);
		showException(e); alert("Помилка при встановленні параметрів проксі-сервера. Перезапустіть програмний модуль Java та/або інтернет браузер. "+euSign.GetLastError()); return;
	}
	

//	Перевірити, чи встановлений каталог файлового сховища сертифікатів
	try {
		var oldFilePath; var newFilePath = document.getElementById('OwnCertPath').value;
		var FileSettings = euSign.CreateFileStoreSettings();
		FileSettings = euSign.GetFileStoreSettings();
		
		if (FileSettings.GetPath() != "") {
			if (FileSettings.GetPath() != oldFilePath) {
				oldFilePath = FileSettings.GetPath();
				FileSettings.SetPath(newFilePath);
				euSign.CreateFolder(newFilePath);
			
//	Створити тестовий масив для перевірки можливості запису сертифікатів до файлового сховища
				var r3_02 = [1,2];
				r3_02[0] = 48; r3_02[1] = 49;
//	Спроба створення файлу у сховищі
				try {
					euSign.WriteFile(FileSettings.GetPath() + "\\delete.me", r3_02);
					euSign.SetFileStoreSettings(FileSettings);
//					console.log("Каталог з сертифікатами налаштован вірно");
				} catch(e) {
					try {
//	Новий файлових шлях недійсний, спробувати запис з використанням старого файлового шляху
						FileSettings.SetPath(oldFilePath);
						euSign.SetFileStoreSettings(FileSettings);
						euSign.WriteFile(FileSettings.GetPath() + "\\delete.me", r3_02);
						if(!confirm("Неможливо використовувати новий файловий шлях до сертифікатів. Чи бажаєти використовувати раніше встановлений " + oldFilePath + "?")){
							return;
						}
					} catch(e) {
//	Старий файловий шлях недійсний, спробувати перевстановити параметри за замовчуванням
						regFormUtils_DefaultFileSettings();
					}
//	Todo: Встановити безпечний тимчасовий шлях до файлового сховища euSign.GetInstallPath()
//			showException(e); regFormStep02_Settings(); return;
				}
			}
		}
			
	} catch(e) {
		showException(e);
		alert("Крок 2. ПОМИЛКА. Не виконано команду euSign.GetFileStoreSettings(). "+euSign.GetLastError());
		return;
	}	
			
//	Виклик наступного кроку налаштування
	if (completed_steps < 2)
		completed_steps=2;
}


// Крок 3. Перевірка коректності введеної інформації email та телефону
function regFormStep03_ContactInfo() {
	if (document.getElementById('PersonalDataCheck').checked!=true)
	{
		alert("Для продовження реєстрації Вам необхідно надати згоду на обробку Ваших персональних даних (поставити позначку)");
		return;
	}


	e_mail = document.getElementById('e_mail').value;
	var e_mail2 = document.getElementById('e_mail2').value;
	phone = document.getElementById('phone').value;
    is_legal = parseInt(document.getElementById('is_legal').value);
    // инкодим для url потому что кирилица не шифруется нормально
    legal_person = encodeURIComponent(document.getElementById('legal_person').value);
	if ((e_mail == "")||(e_mail2 == "")||(phone == ""))
	{
		alert("Ви повинні заповнити всі поля");
		if (phone == "") document.getElementById('phone').focus();
		if (e_mail2 == "") document.getElementById('e_mail2').focus();
		if (e_mail == "") document.getElementById('e_mail').focus();
		return;
	}
    if(is_legal == 1 && legal_person == "")
    {
        alert("Ви повинні заповнити всі поля");
        document.getElementById('legal_person').focus();
        return;
    }
	e_mail = $.trim(e_mail);
	e_mail2 = $.trim(e_mail2);
	document.getElementById('e_mail').value = e_mail;
	document.getElementById('e_mail2').value = e_mail2;
	if (e_mail != e_mail2)
	{
		alert("Адреси електронної пошти повинні бути однакові");
		document.getElementById('e_mail').focus();
		return;
	}
	
	if (validateEmail(e_mail) == true)
	{
//	Перевірка коректності телефонного номеру (можливі 7-значні номери)
		var reg = /^(0[0-9]{2})\s?[0-9]{7}$/;
		if (reg.test(phone) == true)
		{
//	Перехід до 4-го кроку
			if (completed_steps < 3)
				completed_steps=3;
		} else {
			alert("Формат введеного номеру телефону не відповідає зазначеним вимогам. Виправте");
			document.getElementById('phone').focus();
			return;
		}
	} else alert("Введена адреса не пройшла первинну перевірку на справжність. Спробуйте використати іншу адресу електронної пошти");
	
}


//	Підтримка кодування Base64 всіма браузерами через функцію hybrid_encode. Якщо доступна, буде використовуватись вбудована в браузер функція btoa,
//	якщо такої функції немає (IE), то використовується функція Base64.encode з файлу auth/base64ie.js
function hybrid_encode(txt) {
	if (typeof(btoa) === 'function') {
		return btoa(txt);
	} else {
		return Base64.encode(txt);
	}
}

//	Крок 4. Здійснення підпису реєстраційних даних
function regFormStep04_DoSign() {
////	Функція signForm викликається при натисканні на кнопку Реєстрація, та забезпечує обмін інформацією з сервером,
////	проходження процедури підписання даних та відправки підписаних даних за допомогою форми Registrate

//	Скрипт genstr.php очікує послідовність символів GenerateAuthString як запит на генерування рядку автентифікації

		$send = "GenerateAuthString";

		$send = hybrid_encode($send);
		var Sign64 = "";
		
		jQuery.ajax({
		  type: 'POST',
		  url: '/auth/genstr.php',
//		  contentType: 'application/json; charset=utf-8',
		  data: {ask: $send},
		  dataType: 'json',
		  success: function(data){
		    $('.results').html(data);
//	data.randstr містить рядок автентифікації
			Sign64 = data.randstr;
			
//	Відображення форми вибору носія з закритим ключем
			var frameHeight = 450;
			var frameWidth = 800;
			var euReadPKForm = EUReadPKForm(frameHeight, frameWidth, 300, 330);
			euReadPKForm.ShowForm( 
//	Тут розміщена функція, яка виконується у разі успішного вибору носія закритого ключа			
				function(deviceType, deviceName, password) {
					try {
//	Процедура зчитування ключа з ключового носія у пам'ять криптобібліотеки
						euSign.ResetOperation();
						euSign.ResetPrivateKey();
						euSign.ReadPrivateKeySilently(parseInt(deviceType, 10), parseInt(deviceName, 10), password);
						try {
//	Спроба встановити налаштування TSP-сервера з сертифіката користувача
//	Отримання інформації про власника закритого ключа, який зчитаний
							var ownerInfo = euSign.GetPrivateKeyOwnerInfo();
//	Отримання розширеної інформації про сертифікат власника закритого ключа на основі інформації про Видавця сертифікату та його Серійного номеру
							var CertInfoEx = euSign.GetCertificateInfoEx(ownerInfo.GetIssuer(), ownerInfo.GetSerial());
//	Отримання інформації про адресу розміщення сервера позначок часу (TimeStamp) з сертифіката користувача
							var CertInfoTSP = CertInfoEx.GetTSPAccessInfo();
//	Отримання інформації про поточні налаштування сервера TSP
							var tsp = euSign.CreateTSPSettings();
							tsp = euSign.GetTSPSettings();
//	Отримання інформації про кількість сертифікатів серверів TSP у файловому сховищі.
//	Сертифікат TSP-сервера повинен зчитуватись з сервера ЦЗО в момент імпорту власного сертифіката користувача після функції CheckCertificate
							var tspServers = euSign.GetTSPServerCertificatesCount();
							if (tspServers >=1)
							{
//	Встановити обов'язковість наявності позначки часу у підписі користувача
								tsp.SetGetStamps(true);
//	Встановлення адреси TSP-сервера з сертифіката користувача (функція GetTSPAccessInfo, яка витягує інформацію про TSP з сертифікату, не містить порту сервера)
								tsp.SetAddress(CertInfoTSP);
//	Todo: необхідно перевірити, чи всі сертифікати мають TSP-сервер з портом 80
								if (CertInfoTSP.indexOf("http://") == 0)
									tsp.SetPort("80");
								else
									tsp.SetPort("80"); // ???
								try {
//	Збереження встановлений параметрів TSP-сервера
									euSign.SetTSPSettings(tsp);
								} catch(e) { 
//	У випадку збою встановлення параметрів - зтерти зчитаний закритий ключ та завершити роботу Java-модулю
									euSign.ResetPrivateKey();
									euSign.Finalize();
									showExceprion(e); 								
									alert("Не встановлені параметри TSP-сервера. Перевірте наявність сертифіката TSP-сервера у файловому сховищі"); 
									return;
								}
							} else {
//	Якщо в сховищі немаж жодного сертифіката TSP-сервера. Це може статися, коли на сервері ЦЗО немає інформації про TSP-сервер видавця сертифіката, але це є проблемою конкретного видавця сертифікатів
//	або коли не вдалося підключитись до сервера ЦЗО для отримання інформації про імпортований сертифікат користувача
								euSign.ResetPrivateKey();
								euSign.Finalize();
								alert("Перевірте наявність сертифіката TSP-сервера у файловому сховищі, а також параметри доступу до мережі Інтернет");
								return;
							}
						} catch(e) {showException(e);
							euSign.ResetPrivateKey();
							euSign.Finalize();
							alert("Виникла помилка при встановлені параметрів сервера міток часу");
							return;
						}

//	Здійснення підписання рядку автентифікації (попередньо збереженого у елемент document.getElementsByName("Signature")[0]) та електронної адреси, розділених знаком крапки з комою
						Sign64 = euSign.SignInternal("true", Sign64 + ";" + e_mail + ";" + phone + ";" + is_legal + ";" + legal_person);
//	Одразу після підпису, зтерти зчитаний ключ з пам'яті криптобібліотеки
						euSign.ResetPrivateKey();
						euSign.Finalize();
						document.getElementById('s5_pib').value = ownerInfo.GetSubjCN();
						document.getElementById('s5_legal_person').value = decodeURIComponent(legal_person);
						document.getElementById('s5_e_mail').value = e_mail;
						document.getElementById('s5_phone').value = phone;
						document.getElementById('s5_drfo').value = ownerInfo.GetSubjDRFOCode();
						document.getElementById('s5_edrpou').value = ownerInfo.GetSubjEDRPOUCode();
						document.getElementsByName('Signature')[0].value = Sign64;

                        if(is_legal == 1) {
                            document.getElementById('s5_legal_person_wrap').style.display = 'block';
                        }
//	Перехід до останнього кроку						
						if (completed_steps < 4)
							completed_steps=4;
						showStep(5);
						
//	Виконати передачу підпису на сервер з використанням форми Registrate
//						document.forms["registrate"].submit();
					} catch(e)  {
						if (euSign.GetLastErrorCode() == 65)	//EU_ERROR_GET_TIME_STAMP
						{
							alert("Помилка при отриманні позначки часу. Перевірте з'єднання з мережею Інтернет (параметри проксі-сервера) а також чинність сертифікату");
							euSign.Finalize(); euSign.Initialize();
							return;
						}
						if (euSign.GetLastErrorCode() == 18)	//EU_ERROR_KEY_MEDIAS_ACCESS_FAILED
						{
							alert("Виникла помилка при введенні паролю доступу до носія. Будь-ласка, введіть правильний пароль доступу");
							euSign.Finalize(); euSign.Initialize();
							return;
						}
						if (euSign.GetLastErrorCode() == 19)	//EU_ERROR_KEY_MEDIAS_READ_FAILED
						{
							alert("Виникла помилка при зчитуванні ключа на носії. Будь-ласка, підключить до комп'ютера та оберіть потрібний носій з меню зчитування ключа");
							euSign.Finalize(); euSign.Initialize();
							return;
						}
						if (euSign.GetLastErrorCode() == 24)	//EU_ERROR_BAD_PRIVATE_KEY
						{
							alert("Виникла помилка при зчитуванні ключа на носії. Ключ пошкоджений або має невідомий формат. Примітка: При появі даного повідомлення перевірте, чи правильно встановлено мову введення пароля до особистого ключа.");
							euSign.Finalize(); euSign.Initialize();
							return;
						}
						alert("Помилка при створенні підпису. Код помилки:" + euSign.GetLastErrorCode());
					}
				},
//	Тут може бути функція, яка виконується у разі невдалої спроби зчитування ключа з носія (необхідно уточнити)
				null,
//	Тут може бути функція, яка виконується у разі відміни зчитування ключа (необхідно уточнити)
				null, 
//	Текст заголовка форми зчитування ключа
				"Оберіть ключовий носій");
		  },
//	Функція, яка виконується, якщо підготовчий обмін даними з сервером не завершився успішно
		  error: function(data){alert("Неможливо здійснити обмін даними з веб-порталом");}
		});

}



function show_element(type,status)
{param=document.getElementById(type);
if(status==1)
param.style.display = "block";
else
param.style.display = "none";
}

function Use_Proxy_Check(){
    // Пишем на jQuery
    if($('#ProxyUse').is(':checked')) {
        $('#proxy-settings').slideDown();
    } else {
        $('#proxy-settings').slideUp();
    }
}

function Use_Proxypas_Check(){
    if($('#ProxyAnonymous').is(':checked')) {
        $('#proxy-auth').slideDown();
    } else {
        $('#proxy-auth').slideUp();
    }
}


function btnAllToggle() {
	$("tr.spoiler-body").slideToggle();
}

function visible_button() {
	$("tr.spoiler-body").slideToggle();
}

//	Запуск переходу на інший крок по натисканню на пункт панелі зліва
	$("li.step").click(function(){showStep(this.id.substr(this.id.length - 1));});


//	Показує елементи вказаного кроку реєстрації
//	Використовуються ID елементів типу li
function showStep(goStepNumber) {
//		var goStepNumber = this.id.substr(this.id.length - 2);

	var curStep = $(".step.active").attr('id');
	var curStepNumber = curStep.substr(curStep.length - 1);

	if (curStepNumber == 1) {	// Виконати Крок 1 (Ініціалізація)
		regFormStep01_euSignInit();
	}
	
	if (curStepNumber == 2) {	// Виконати Крок 2 (Параметри файлового сховища та проксі-сервера)
		regFormStep02_Settings();
	}
	
	if (curStepNumber == 3) {	// Виконати Крок 3 (e-mail та телефон)
		regFormStep03_ContactInfo();
	}
	
	if (curStepNumber == 4) { // Виконання Кроку 4 передбачає виконання підпису, тому він повинен виконуватися безпосередньо через кнопку "Підписати"
	}
		
	if ((curStepNumber == 5)&&(goStepNumber < 5)) { // Якщо вийшли з кроку 5 - необхідно створити новий підпис для переходу знову до кроку 5
		completed_steps = 3;
	}

	if ((goStepNumber <= completed_steps+1)&&goStepNumber>=0) {
		if ((goStepNumber == 5)&&(curStepNumber != 4)){ // Перехід до Кроку 5 передбачає здійснення підпису на Кроці 4 через кнопку "Підписати"
			alert('Для переходу на крок 5 Ви повинні сформувати новий цифровий підпис через кнопку "Підписати" на Кроці 4');
			return;
		}

//	Скрити поточну вкладку та показати вкладку, на яку необхідно перейти
		$(".services-page.tabs-block").hide();
		$("#tbStep0"+goStepNumber).show();
		$("#Step0"+goStepNumber).parent().children("li.step").removeClass("active");
		$("#Step0"+goStepNumber).addClass("active");
			
//		if (goStepNumber == 2) {
//			document.getElementById('btnStep02').focus();
//		}	
//		if (goStepNumber == 3) {
//			document.getElementById('e_mail').focus();
//		}		
		if (goStepNumber == 4){	// При переході до Кроку 4 необхідно оновити таблицю сертифікатів
			GenCertTable();
//			if (euSign.GetEndUserCertificatesCount() <= 0)
//				document.getElementById('btnImportOwnCertificate').focus();
//			else	document.getElementById('btnStep04').focus();
		}
		window.location.hash = '#tbStep0' + goStepNumber;
	} //else {alert("Для переходу на цей крок необхідно виконати попередні");} // Annoying
}
	

function showException(e) {
	if (e.description) {
		alert(e.description.replace("java.lang.Exception:",""));
	} else {
		alert(e);
	}
}		

//	Допоміжна функція встановлення шляху до файлового сховища
function settingsSetPath(){
	try {
		var newPath = "";
		newPath = euSign.SelectFolder();
		if (newPath != "")
			document.getElementById('OwnCertPath').value = newPath;
	} catch(e) { showException(e); alert("Виникла помилка при виборі нового шляху. Рекомендується обрати іншу директорію або залишити встановлене значення"); }
}

function validateEmail(email) { 
//	
//    var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	
	var re = /^[a-zA-Z0-9][a-zA-Z\-0-9\.]*[a-zA-Z0-9]@(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,})$/;
    return re.test(email);
} 


//	Допоміжна функція створення заголовку таблиці сертифікатів
function startOwnCertTableInnerHTML() {
	var content = '<table id="OwnCertTable" class="table table-bordered" width="100%">';
	content += '<tr><th>Прізвище, ім\'я, по батькові</th>';
	content += '<th>Найменування центра сертифікації ключів</th>';
	content += '<th>Серійний номер</th>';
	content += '<th>Чинність</th></tr>';
	return content;
}

//	Допоміжна функція завершення таблиці сертифікатів
function endOwnCertTableInnerHTML(content) {
	content += '</table>';
	return content;
}

//	Допоміжна функція будування таблиці сертифікатів файлового сховища (додавання нового рядку до таблиці у варіанті, який функціонує як на MSIE так і на інших браузерах)
function add4RowOwnCertTableInnerHTML(content, c1, c2, c3, c4, c4color) {
	content += '<tr><td>' + c1 + '</td>';
	content += '<td>' + c2 + '</td>';
	content += '<td>' + c3 + '</td>';
	content += '<td style="background-color: ' + c4color + '">' + c4 + '</td></tr>';
	return content;
}

//	Функція, яка виводить інформацію про відсутність сертифікатів у сховищі
function emptyOwnCertTableInnerHTML() {
	var content = '<table id="OwnCertTable" border="0" width="100%" style="table-layout:fixed">';
	content += '<tr><td><div style="font-size: 17px; color: red">Немає сертифікатів. Вам необхідно імпортувати свій сертифікат з файлу</div></td></tr></table>';
	return content;
}

//	Функція наповнення таблиці про сертифікати користувачів у файловому сховищі
function GenCertTable()
{
	if (euSign.IsInitialized() == false)
		euSign.Initialize();
	try {
		if (euSign.GetEndUserCertificatesCount() <= 0) {	// Немає сертифікатів користувача
			document.getElementById('divOwnCertTable').innerHTML = emptyOwnCertTableInnerHTML();
			document.getElementById('btnStep04').disabled="disabled";
			jQuery("#btnStep04").addClass('disabled');
//			document.getElementById('btnImportOwnCertificate').focus();
		} else {
			var table = startOwnCertTableInnerHTML();
			for(var i=0;i<euSign.GetEndUserCertificatesCount();i++)
			{
				var certInfo = euSign.EnumEndUserCertificatesCount(i);
				var td1=certInfo.GetSubjCN();	// ПІБ користувача
				var td2=certInfo.GetIssuerCN(); // Найменування ЦСК
				var td3=certInfo.GetSerial();   // Серійний номер
				var td4="";                     // Комірка таблиці для інформації про чинність сертифікату
				var td4col="";                  // Колір комірки таблиці про чинність (зелений - чинний, жовний - проблеми)
		
				try {
//	Отримання розширеной інформації про сертифікат для здійснення його перевірки на сервері ЦЗО
					var certInfoEx = euSign.GetCertificateInfoEx(certInfo.GetIssuer(), certInfo.GetSerial());
					var certDate = certInfoEx.GetCertEndTime();
//	CertDate - для відображення строку чинності сертифіката
					certDate = certDate.toLocaleString();
					delete certInfoEx;
					var certBytes = euSign.GetCertificate(certInfo.GetIssuer(), certInfo.GetSerial());
					try {
//	Функція перевірки статусу сертифіката. Якщо є проблеми, то перехід до гілки catch, функція euSign.GetLastError() повертає опис помилки, euSign.GetLastErrorCode() - код помилки
						euSign.CheckCertificate(certBytes);
						delete certBytes;
						var errorCode = euSign.GetLastErrorCode();
						if (errorCode == "0") //сертифікат чинний
						{
							td4 = certDate;
							td4col = "#A2D507";
						}
					} catch(e) {
						if (euSign.GetLastErrorCode() == "51") //Сертифікат не знайдено
						{
							td4 = "Не визначено";
						}
						if (euSign.GetLastErrorCode() == "8")	//EU_ERROR_PROXY_NOT_AUTHORIZED
						{
							alert("Вам необхідно ввести логін та пароль до проксі-сервера");
							showStep(2);
							return;
						}
						td4col = "#D5A207";
					}
				} catch(e) {
					showException(e); alert("Виникли проблеми перевірки статусу сертифікатів у файловому сховищі. "+euSign.GetLastError()); euSign.Finalize(); euSign.Initialize(); return;
				}
		
//	Додавання до таблиці рядку з черговим перевіреним сертифікатом
				table = add4RowOwnCertTableInnerHTML(table, td1, td2, td3, td4, td4col);
			}
			document.getElementById('btnStep04').disabled="";
			jQuery("#btnStep04").removeClass('disabled');
			document.getElementById('divOwnCertTable').innerHTML = endOwnCertTableInnerHTML(table);
			euSign.Finalize();
			euSign.Initialize();
		}
	} catch(e) {
		alert("Помилка при створенні переліку сертифікатів користувачів. Код помилки: "+euSign.GetLastErrorCode());}
}

//	Функція імпорту сертифіката користувача
function importOwnCertificate() {
		try {
			var errorCode;
			var error;
//	Вибір файлу через інтерфейс Java-модулю. Є проблеми з директоріями з кирилічними символами
			var fileName = euSign.SelectFile(true, "");
			if(fileName == "")
				return;
			var certData = euSign.ReadFile(fileName);
//	Перевірити обраний файл як сертифікат. Якщо сертифікат пошкоджений або перевірити його не вдалось - він не імпортується до сховища.
//	Це є мірою обережності, щоб користувач не використовував хибні сертифікати
			euSign.CheckCertificate(certData);
			errorCode = euSign.GetLastErrorCode();
			if (errorCode == "0")
			{
//	Зберегти обраний файл як файл сертифікату у файлове сховище з іменем, яке співпадає з серійним номером сертифіката
				euSign.SaveCertificate(certData);
//	Відновити таблицю сертифікатів
				GenCertTable();
//				document.getElementById('btnStep04').focus();
			}
		} catch(e) {
			errorCode = euSign.GetLastErrorCode();
			error = euSign.GetLastError(); 
			if (errorCode == "51") {
				alert("Сертифікат не вдалось перевірити, не вдалось здійснити підключення до сервера ЦЗО або сертифікат не є чинним. Перевірте параметри доступу до мережі Інтернет");
			} else if (errorCode =="33") {
				alert("Обраний файл не має невідомий формат (або не є сертифікатом)");
			} else
				alert("Помилка при імпорті власного сертифікату користувача. Код помилки: "+errorCode);
		}

}

